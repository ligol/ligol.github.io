<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ligol Blog]]></title>
  <link href="http://ligol.github.io/atom.xml" rel="self"/>
  <link href="http://ligol.github.io/"/>
  <updated>2015-05-18T12:05:19+02:00</updated>
  <id>http://ligol.github.io/</id>
  <author>
    <name><![CDATA[Baptiste Lagache]]></name>
    <email><![CDATA[baptiste@ligol.fr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Discovering and Using Stetho with some network library]]></title>
    <link href="http://ligol.github.io/blog/2015/05/05/discovering-and-using-stetho-with-some-network-library/"/>
    <updated>2015-05-05T23:30:40+02:00</updated>
    <id>http://ligol.github.io/blog/2015/05/05/discovering-and-using-stetho-with-some-network-library</id>
    <content type="html"><![CDATA[<p>During my work on some personal project, I was digging around the web(Reddit, &hellip;) and I&rsquo;ve found that great Debugging library developed by Facebook and named <a href="http://facebook.github.io/stetho/">Stetho</a></p>

<h2>The Stetho Library</h2>

<p>This library as for goal to allow you to debug your android application by using the Chrome Developer Tools feature.</p>

<p>Concerning the Database Inspection and the View Hierarchy everything work fine just after adding the library and enabled it like it&rsquo;s explained on the <a href="http://facebook.github.io/stetho/">Stetho website</a>.</p>

<!-- more -->


<h3>The Network Inspection element</h3>

<p>But one of the best thing of this tools is the Network Inspection element, who allow you to inspect all of the request made by your application and see in details which Headers are sent or received, which response you get and all the other thing you can need on networking.</p>

<p>Only at this time Stetho only support OkHttp and UrlConnection directly. So if you use Volley or ION, you can&rsquo;t directly use this tools, I&rsquo;m personally using this tools, so I spend time to search a way to enable this with these library and I finally found some interesting workaround.</p>

<h4>The Volley Support</h4>

<p>So let&rsquo;s start with Volley Support :</p>

<p>To enable the support of Network Inspection on Volley we are going to use OkHttp as base for the Volley HttpStack you can find a gist shared by Bryan Stern at <a href="https://gist.github.com/bryanstern/4e8f1cb5a8e14c202750">this link</a> with a working implementation. So take this java file and add it to your project now we need to create our RequestQueue and link it to Stetho.</p>

<p>This is the code you need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">OkHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">OkHttpClient</span><span class="o">();</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">networkInterceptors</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">StethoInterceptor</span><span class="o">());</span>
</span><span class='line'><span class="n">mRequestQueue</span> <span class="o">=</span> <span class="n">Volley</span><span class="o">.</span><span class="na">newRequestQueue</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span> <span class="k">new</span> <span class="nf">OkHttpStack</span><span class="o">(</span><span class="n">client</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>You also need to add these dependency to your project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">facebook</span><span class="o">.</span><span class="na">stetho</span><span class="o">:</span><span class="nl">stetho:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">facebook</span><span class="o">.</span><span class="na">stetho</span><span class="o">:</span><span class="n">stetho</span><span class="o">-</span><span class="nl">okhttp:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">squareup</span><span class="o">.</span><span class="na">okhttp</span><span class="o">:</span><span class="nl">okhttp:</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">0</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The Ion Support</h4>

<p>So let&rsquo;s start with Ion Support :</p>

<p>To enable the support of Network Inspection on Ion we are going to use the Ion StethoMiddleware made by Koush specifically for Ion, you can find it on <a href="https://github.com/koush/AndroidAsync/tree/master/AndroidAsyncStetho">this link</a>.
So after adding this files to your project you just need to add the StethoMiddleware to Ion with this code line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Ion</span><span class="o">.</span><span class="na">getDefault</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">getHttpClient</span><span class="o">().</span><span class="na">getMiddleware</span><span class="o">()</span>
</span><span class='line'><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">StethoMiddleware</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this the Network Inspection will work on your project and each request you have launched will be printed in the Chrome Dev Tools.</p>

<h3>Going Further</h3>

<h4>Include and Enable only on Debug Build</h4>

<p>The next goal is to have the Stetho support only on Debug build and to don&rsquo;t have any dependency on the Release Apk of your application.</p>

<p>To do this, we are going to use the BuildType system of gradle in Android Studio.
Two files will be extended or override by a new version to achieve this goal.</p>

<p>Let&rsquo;s start with the application class where we enable Stetho, create a new class named for exemple ApplicationControllerExtension in the debug folder(src/java/debug) and make this class extends your Application class. Next step add the Stetho initialization in this class and remove it from the Application class.
This is a sample of class with the Volley initialization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppControllerExtension</span> <span class="kd">extends</span> <span class="n">AppController</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Stetho</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Stetho</span><span class="o">.</span><span class="na">newInitializerBuilder</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">enableDumpapp</span><span class="o">(</span><span class="n">Stetho</span><span class="o">.</span><span class="na">defaultDumperPluginsProvider</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">enableWebKitInspector</span><span class="o">(</span><span class="n">Stetho</span><span class="o">.</span><span class="na">defaultInspectorModulesProvider</span><span class="o">(</span><span class="k">this</span><span class="o">))</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">RequestQueue</span> <span class="nf">getRequestQueue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mRequestQueue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">OkHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">OkHttpClient</span><span class="o">();</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="na">networkInterceptors</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">StethoInterceptor</span><span class="o">());</span>
</span><span class='line'>            <span class="n">mRequestQueue</span> <span class="o">=</span> <span class="n">Volley</span><span class="o">.</span><span class="na">newRequestQueue</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span> <span class="k">new</span> <span class="nf">OkHttpStack</span><span class="o">(</span><span class="n">client</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mRequestQueue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A this point, it only miss one thing start your application with this class instead of the release class. To enable this we need to override the AndroidManifest file and change the Application class defined on it.</p>

<p>This a AndroidManifest sample overriding the application section of our release manifest to enable the ApplicationControllerExtention class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">package=</span><span class="s">&quot;com.mypackage.mypackage&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;application</span>
</span><span class='line'>        <span class="na">android:name=</span><span class="s">&quot;com.mypackage.mypackage.ApplicationControllerExtension&quot;</span>
</span><span class='line'>        <span class="na">tools:replace=</span><span class="s">&quot;android:name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/application&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New blog with octopress]]></title>
    <link href="http://ligol.github.io/blog/2015/05/01/new-blog-with-octopress/"/>
    <updated>2015-05-01T09:58:59+02:00</updated>
    <id>http://ligol.github.io/blog/2015/05/01/new-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>Hello everyone,</p>

<p>With my first post, I want to describe the goal of this blog and with what it is made.</p>

<p>So let&rsquo;s start with the goal. This blog have several goal, it&rsquo;s firstly an experiment to discover new technology and project. From this and my other experiments I will try to fulfill this blog with explanation or tutorial on these experiments.
The main category of the post will be Android development, because I&rsquo;m an android dev and most of the techno I discover are related to my job.</p>

<p>Now a little talk about the technology used here, this blog is generated by Octopress and use the greyshade theme by <a href="http://shashankmehta.in/archive/2012/greyshade.html">Shashank Mehta</a>.</p>

<p>Note that the <a href="https://github.com/shashankmehta/greyshade#readme">only condition</a> from the author is that you use a unique highlight color. In the above, my highlight color is #64dd17, and if you search this color, you will find it&rsquo;s the Material Light Green A700 color, yep still with Android.</p>
]]></content>
  </entry>
  
</feed>
